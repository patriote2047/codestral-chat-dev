import chalk from 'chalk';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import fs from 'node:fs';

// Obtenir le chemin absolu du r√©pertoire courant
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Importer les modules avec des chemins relatifs simples
import { lireFichier } from './lire-fichier.mjs';
import { extraireFonctions } from './extraire-fonctions.mjs';
import { creerDossier } from './creer-dossier.mjs';
import { creerFichiersFonctions } from './creer-fichiers-fonctions.mjs';
import { creerFichierPrincipal } from './creer-fichier-principal.mjs';

/**
 * D√©compose un fichier JavaScript en modules individuels
 * @param {string} filePath - Chemin du fichier √† d√©composer
 */
async function decomposer(filePath) {
    try {
        console.log(chalk.blue('\nüîç D√©composition du fichier...'));
        console.log(chalk.gray(`Fichier source: ${filePath}`));

        // 1. Lire le fichier source
        console.log(chalk.gray('\n1. Lecture du fichier source...'));
        const contenu = await lireFichier(filePath);
        if (!contenu) {
            throw new Error('Le contenu du fichier est vide');
        }
        console.log(chalk.green('‚úì Fichier lu avec succ√®s'));
        console.log(chalk.gray(`Taille: ${contenu.length} caract√®res`));

        // 2. Extraire les fonctions
        console.log(chalk.gray('\n2. Extraction des fonctions...'));
        const fonctions = extraireFonctions(contenu);
        if (!fonctions || fonctions.length === 0) {
            throw new Error('Aucune fonction trouv√©e dans le fichier');
        }
        console.log(chalk.green(`‚úì ${fonctions.length} fonctions extraites`));
        fonctions.forEach((f, i) => {
            console.log(chalk.gray(`   ${i + 1}. ${f.nom}`));
        });

        // 3. Cr√©er le dossier pour le module
        console.log(chalk.gray('\n3. Cr√©ation du dossier...'));
        const moduleNom = path.basename(filePath, path.extname(filePath));
        const dossierPath = await creerDossier(moduleNom);
        if (!dossierPath) {
            throw new Error('√âchec de la cr√©ation du dossier');
        }
        console.log(chalk.green(`‚úì Dossier cr√©√©: ${dossierPath}`));

        // 4. Cr√©er les fichiers des fonctions
        console.log(chalk.gray('\n4. Cr√©ation des fichiers des fonctions...'));
        await creerFichiersFonctions(dossierPath, fonctions);
        console.log(chalk.green('‚úì Fichiers des fonctions cr√©√©s'));

        // 5. Cr√©er le fichier principal dans le dossier
        console.log(chalk.gray('\n5. Cr√©ation du fichier principal dans le dossier...'));
        const fichierPrincipalPath = await creerFichierPrincipal(moduleNom, dossierPath, fonctions);
        if (!fichierPrincipalPath) {
            throw new Error('√âchec de la cr√©ation du fichier principal');
        }
        console.log(chalk.green(`‚úì Fichier principal cr√©√©: ${fichierPrincipalPath}`));

        // 6. Cr√©er le fichier principal √† la racine
        console.log(chalk.gray('\n6. Cr√©ation du fichier principal √† la racine...'));
        const contenuPrincipal = `/**
 * Module de gestion des calculs math√©matiques avanc√©s
 * Ce module contient une s√©rie de fonctions pour effectuer des calculs
 * math√©matiques et g√©om√©triques.
 * 
 * Ce fichier est le point d'entr√©e principal qui r√©exporte toutes les fonctions
 * depuis le module d√©compos√©.
 */

export * from './${moduleNom}/index.mjs';`;
        
        const fichierRacinePath = path.join(path.dirname(dossierPath), `${moduleNom}.mjs`);
        await fs.promises.writeFile(fichierRacinePath, contenuPrincipal);
        console.log(chalk.green(`‚úì Fichier principal √† la racine cr√©√©: ${fichierRacinePath}`));

        console.log(chalk.blue('\nüì¶ D√©composition termin√©e avec succ√®s!\n'));
        console.log(chalk.gray('Structure cr√©√©e:'));
        console.log(chalk.gray(`  ${moduleNom}.mjs`));
        console.log(chalk.gray(`  ${moduleNom}/`));
        fonctions.forEach(f => {
            console.log(chalk.gray(`    ‚îú‚îÄ‚îÄ ${f.nom}.mjs`));
        });
        console.log();

    } catch (error) {
        console.error(chalk.red(`\n‚ùå Erreur: ${error.message}`));
        if (error.stack) {
            console.error(chalk.gray('\nD√©tails de l\'erreur:'));
            console.error(chalk.gray(error.stack));
        }
        process.exit(1);
    }
}

// Si le script est ex√©cut√© directement
const scriptPath = fileURLToPath(import.meta.url);
console.log('Debug - scriptPath:', scriptPath);
console.log('Debug - process.argv[1]:', process.argv[1]);

if (process.argv[1].endsWith('decomposer.mjs')) {
    const filePath = process.argv[2];

    if (!filePath || process.argv.includes('--help') || process.argv.includes('-h')) {
        console.log(chalk.blue('\nüìã Utilisation:\n'));
        console.log(chalk.white('  node decomposer.mjs <chemin_du_fichier>\n'));
        console.log(chalk.gray('  Le script va:'));
        console.log(chalk.gray('    1. Lire le fichier JavaScript source'));
        console.log(chalk.gray('    2. Extraire toutes les fonctions'));
        console.log(chalk.gray('    3. Cr√©er un dossier pour le module'));
        console.log(chalk.gray('    4. Cr√©er un fichier par fonction'));
        console.log(chalk.gray('    5. Cr√©er un fichier principal qui importe/exporte tout\n'));
        console.log(chalk.gray('  Chaque √©tape est r√©alis√©e par un script s√©par√©:'));
        console.log(chalk.gray('    - scripts/lire-fichier.mjs'));
        console.log(chalk.gray('    - scripts/extraire-fonctions.mjs'));
        console.log(chalk.gray('    - scripts/creer-dossier.mjs'));
        console.log(chalk.gray('    - scripts/creer-fichiers-fonctions.mjs'));
        console.log(chalk.gray('    - scripts/creer-fichier-principal.mjs\n'));
        console.log(chalk.gray('  Exemple:'));
        console.log(chalk.gray('    node decomposer.mjs ../mon-module.js\n'));
        process.exit(0);
    }

    try {
        console.log(chalk.blue('\nD√©marrage de la d√©composition...'));
        console.log(chalk.gray(`Fichier source: ${filePath}`));
        console.log(chalk.gray('Chemin absolu:', path.resolve(filePath)));
        
        await decomposer(filePath).catch(error => {
            console.error(chalk.red(`\n‚ùå Erreur dans decomposer: ${error.message}`));
            console.error(chalk.gray('\nD√©tails de l\'erreur:'));
            console.error(chalk.gray(error.stack));
            process.exit(1);
        });
        
        console.log(chalk.green('\n‚úì D√©composition termin√©e avec succ√®s!'));
    } catch (error) {
        console.error(chalk.red(`\n‚ùå Erreur principale: ${error.message}`));
        console.error(chalk.gray('\nD√©tails de l\'erreur:'));
        console.error(chalk.gray(error.stack));
        process.exit(1);
    }
} 